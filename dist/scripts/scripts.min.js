"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,s=new Array(t);n<t;n++)s[n]=e[n];return s}
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */function memoryGame(e){var t,n=[{name:"leaf",img:"./assets/icons/sprite.svg#leaf"},{name:"brightness-up",img:"./assets/icons/sprite.svg#brightness-up"},{name:"star",img:"./assets/icons/sprite.svg#star"},{name:"flame",img:"./assets/icons/sprite.svg#flame"},{name:"mountain",img:"./assets/icons/sprite.svg#mountain"},{name:"music",img:"./assets/icons/sprite.svg#music"}],s=document.querySelector(".memory-game__root"),o=document.getElementById("memory-game__alert"),r=document.getElementById("memory-game__result"),a=document.getElementById("memory-game__button"),c="./assets/icons/sprite.svg#search",i="./assets/icons/sprite.svg#check",l=[],d=[],u=[];function m(){var e=l[0],s=l[1],a=d[0],c=d[1];a===c?(o.textContent="You have clicked the same image",v()):e===s?(o.textContent="You found a match",t[a].querySelector("img").setAttribute("src",i),t[c].querySelector("img").setAttribute("src",i),t[a].removeEventListener("click",f),t[c].removeEventListener("click",f),u.push(d)):(o.textContent="Try again",v()),l=[],d=[],r.textContent=u.length,u.length===n.length/2&&(o.textContent="Congratulations! You found them all")}function f(e){var t=e.target.closest("div").querySelector("img"),s=e.target.closest("div").getAttribute("data-memorygameid");l.push(n[s].name),d.push(s),t.setAttribute("src",n[s].img),2===l.length&&setTimeout(m,500),l.length>2&&v()}function v(){t.forEach((function(e){u.flat(1/0).includes(e.dataset.memorygameid)||e.querySelector("img").setAttribute("src",c)}))}function L(){l=[],d=[],u=[],o.textContent="Let's get started!",r.textContent=u.length,s.textContent=""}n=[].concat(_toConsumableArray(n),_toConsumableArray(n)),a.addEventListener("click",(function(){e=!1,a.textContent="New game",L(),function(){n.sort((function(){return.5-Math.random()}));for(var e=0;e<n.length;e++){var o=document.createElement("div"),r=document.createElement("img");r.setAttribute("src",c),r.setAttribute("alt","card"),o.setAttribute("data-memorygameid",e),o.addEventListener("click",f),o.appendChild(r),s.appendChild(o)}t=s.querySelectorAll("div")}()})),e&&(L(),a.textContent="Start")}function whackAMole(e){var t,n,s,o,r=document.querySelector(".whack-a-mole__root"),a=document.getElementById("whack-a-mole__time"),c=document.getElementById("whack-a-mole__result"),i=document.getElementById("whack-a-mole__button"),l="./assets/icons/sprite.svg#smiley",d=60,u=0;function m(){for(var e=0;e<6;e++){var n=document.createElement("div"),a=document.createElement("img");a.setAttribute("src",l),a.setAttribute("alt","mole"),n.setAttribute("data-whackamole",e),n.addEventListener("mouseup",v),n.appendChild(a),r.appendChild(n)}t=r.querySelectorAll("div"),s=setInterval(f,700),o=setInterval(L,1e3)}function f(){var e=t[Math.floor(6*Math.random())];t.forEach((function(e){e.querySelector("img").setAttribute("src",l),e.classList.remove("mole")})),e.classList.add("mole"),n=e.dataset.whackamole}function v(){this.dataset.whackamole===n&&(this.querySelector("img").setAttribute("src","./assets/icons/sprite.svg#smiley-f"),u++,c.textContent=u,n=null)}function L(){d--,a.textContent=d,0===parseInt(d)&&(clearInterval(s),clearInterval(o),c.textContent="Game over! Your final score is "+u)}function g(){u=0,c.textContent=u,n=null,clearInterval(s),clearInterval(o),d=60,a.textContent=d,r.textContent=""}i.addEventListener("click",(function(){e=!1,i.textContent="New game",g(),m()})),e&&(g(),i.textContent="Start")}function connectFour(e){var t,n=[[0,1,2,3],[41,40,39,38],[7,8,9,10],[34,33,32,31],[14,15,16,17],[27,26,25,24],[21,22,23,24],[20,19,18,17],[28,29,30,31],[13,12,11,10],[35,36,37,38],[6,5,4,3],[0,7,14,21],[41,34,27,20],[1,8,15,22],[40,33,26,19],[2,9,16,23],[39,32,25,18],[3,10,17,24],[38,31,24,17],[4,11,18,25],[37,30,23,16],[5,12,19,26],[36,29,22,15],[6,13,20,27],[35,28,21,14],[0,8,16,24],[41,33,25,17],[7,15,23,31],[34,26,18,10],[14,22,30,38],[27,19,11,3],[35,29,23,17],[6,12,18,24],[28,22,16,10],[13,19,25,31],[21,15,9,3],[20,26,32,38],[36,30,24,18],[5,11,17,23],[37,31,25,19],[4,10,16,22],[2,10,18,26],[39,31,23,15],[1,9,17,25],[40,32,24,16],[9,17,25,33],[8,16,24,32],[11,17,23,29],[12,18,24,30],[1,2,3,4],[5,4,3,2],[8,9,10,11],[12,11,10,9],[15,16,17,18],[19,18,17,16],[22,23,24,25],[26,25,24,23],[29,30,31,32],[33,32,31,30],[36,37,38,39],[40,39,38,37],[7,14,21,28],[8,15,22,29],[9,16,23,30],[10,17,24,31],[11,18,25,32],[12,19,26,33],[13,20,27,34]],s=document.querySelector(".connect-four__root"),o=document.getElementById("connect-four__alert"),r=document.getElementById("connect-four__player"),a=document.getElementById("connect-four__button"),c=1,i=!1;function l(){for(var e=0;e<n.length;e++){var s=t[n[e][0]],r=t[n[e][1]],a=t[n[e][2]],c=t[n[e][3]];if(s.classList.contains("player-one")&&r.classList.contains("player-one")&&a.classList.contains("player-one")&&c.classList.contains("player-one")&&(i=!0,o.textContent="Player One Wins!"),s.classList.contains("player-two")&&r.classList.contains("player-two")&&a.classList.contains("player-two")&&c.classList.contains("player-two")&&(i=!0,o.textContent="Player Two Wins!"),i)for(var l=0;l<t.length-7;l++)t[l].removeEventListener("click",d)}}function d(e){for(var n=0;n<t.length-7;n++)t[n]===e.target&&t[n+7].classList.contains("taken")&&!t[n].classList.contains("taken")?(t[n].classList.add("taken"),t[n].removeEventListener("click",d),1===c?(t[n].classList.add("player-one"),c=2):2===c&&(t[n].classList.add("player-two"),c=1),r.textContent=c):o.textContent="Cant go here",l()}function u(){c=1,r.textContent=c,i=!1,o.textContent="Let's get started!",s.textContent=""}a.addEventListener("click",(function(){e=!1,a.textContent="New game",u(),function(){for(var e=0;e<49;e++){var n=document.createElement("div");e>=42?n.classList.add("taken"):n.addEventListener("click",d),n.setAttribute("data-connectfour",e),s.appendChild(n)}t=s.querySelectorAll("div")}()})),e&&(u(),a.textContent="Start")}function snake(e){var t,n=document.querySelector(".snake__root"),s=document.getElementById("snake__alert"),o=document.getElementById("snake__result"),r=document.getElementById("snake__button"),a=10,c=0,i=0,l=[2,1,0],d=1,u=0,m=0,f=0;function v(){var e=l[0];if(e+a>=100&&d===a||l[0]%a==9&&1===d||e%a==0&&-1===d||e-a<0&&-10===d||t[e+d].classList.contains("snake"))return s.textContent="Boom Crash! Your score is "+u,clearInterval(f);var n=l.pop();t[n].classList.remove("snake"),l.unshift(e+d),e=l[0],t[e].classList.contains("apple")&&(t[e].classList.remove("apple"),l.push(n),g(),u++,o.textContent=u,clearInterval(f),m*=.9,f=setInterval(v,m)),t[e].classList.add("snake")}function L(e){t[c].classList.remove("snake"),39===e.keyCode?d=1:38===e.keyCode?d=-10:37===e.keyCode?d=-1:40===e.keyCode&&(d=10)}function g(){do{i=Math.floor(Math.random()*t.length)}while(t[i].classList.contains("snake"));t[i].classList.add("apple")}function y(){u=0,o.textContent=u,clearInterval(f),d=1,m=1e3,c=0,l=[2,1,0],s.textContent="Let's get started!",n.textContent="",document.removeEventListener("keyup",L)}e&&(y(),r.textContent="Start"),r.addEventListener("click",(function(){e=!1,r.textContent="New game",y(),function(){for(var e=0;e<100;e++){var s=document.createElement("div");n.appendChild(s)}t=n.querySelectorAll("div")}(),l.forEach((function(e){return t[e].classList.add("snake")})),g(),f=setInterval(v,m),document.addEventListener("keyup",L)}))}function spaceInvaders(e){var t,n,s,o,r,a,c,i,l=document.querySelector(".space-invaders__root"),d=document.getElementById("space-invaders__alert"),u=document.getElementById("space-invaders__result"),m=document.getElementById("space-invaders__button"),f=15;function v(){for(var e=0;e<i.length;e++)c.includes(e)||t[i[e]].classList.add("invader")}function L(e){switch(t[o].classList.remove("shooter"),e.key){case"ArrowLeft":o%f!=0&&(o-=1);break;case"ArrowRight":o%f<14&&(o+=1)}t[o].classList.add("shooter")}function g(){var e=i[0]%f==0,s=i[i.length-1]%f==14;if(function(){for(var e=0;e<i.length;e++)t[i[e]].classList.remove("invader")}(),s&&r)for(var l=0;l<i.length;l++)i[l]+=16,n=-1,r=!1;if(e&&!r)for(var u=0;u<i.length;u++)i[u]+=14,n=1,r=!0;for(var m=0;m<i.length;m++)i[m]+=n;v(),t[o].classList.contains("invader","shooter")&&(clearInterval(a),d.textContent="Game Over");for(var L=0;L<i.length;L++)i[L]>t.length&&(clearInterval(a),d.textContent="Game Over");c.length===i.length&&(clearInterval(a),d.textContent="You Win")}function y(e){var n,r=o;switch(e.key){case"ArrowUp":n=setInterval((function(){if(r<0||r-f<0)t[r].classList.remove("laser"),clearInterval(n);else if(t[r].classList.remove("laser"),t[r-=f].classList.add("laser"),t[r].classList.contains("invader")){t[r].classList.remove("laser"),t[r].classList.remove("invader"),t[r].classList.add("boom"),setTimeout((function(){return t[r].classList.remove("boom")}),300),clearInterval(n);var e=i.indexOf(r);c.push(e),s++,u.textContent=s}}),100)}}function h(){n=1,s=0,u.textContent=s,o=202,r=!0,c=[],i=[0,1,2,3,4,5,6,7,8,9,15,16,17,18,19,20,21,22,23,24,30,31,32,33,34,35,36,37,38,39],clearInterval(a),d.textContent="Let's get started!",l.textContent="",document.removeEventListener("keydown",L),document.removeEventListener("keydown",y)}m.addEventListener("click",(function(){e=!1,m.textContent="New game",h(),function(){for(var e=0;e<225;e++){var n=document.createElement("div");l.appendChild(n)}t=l.querySelectorAll("div"),v(),t[o].classList.add("shooter"),document.addEventListener("keydown",L),a=setInterval(g,600),document.addEventListener("keydown",y)}()})),e&&(h(),m.textContent="Start")}function frogger(e){var t,n,s,o,r,a,c,i,l=document.querySelector(".frogger__root"),d=document.getElementById("frogger__alert"),u=document.getElementById("frogger__time"),m=document.getElementById("frogger__button");function f(e){switch(s[t].classList.remove("frog"),e.keyCode){case 37:t%9!=0&&(t-=1);break;case 38:t-9>=0&&(t-=9);break;case 39:t%9<8&&(t+=1);break;case 40:t+9<81&&(t+=9)}s[t].classList.add("frog"),v(),s[4].classList.contains("frog")&&(d.textContent="You Won",clearInterval(i),document.removeEventListener("keyup",f))}function v(){(0===n||s[t].classList.contains("c1")||s[t].classList.contains("l5")||s[t].classList.contains("l4"))&&(d.textContent="You Lose",s[t].appendChild(document.createElement("img")),s[t].querySelector("img").setAttribute("src","./assets/icons/sprite.svg#close"),s[t].querySelector("img").setAttribute("alt","frog"),clearInterval(i),document.removeEventListener("keyup",f))}function L(){n--,u.textContent=n,a.forEach((function(e){return function(e){e.classList.contains("c1")?(e.classList.remove("c1"),e.classList.add("c2")):e.classList.contains("c2")?(e.classList.remove("c2"),e.classList.add("c3")):e.classList.contains("c3")&&(e.classList.remove("c3"),e.classList.add("c1"))}(e)})),c.forEach((function(e){return function(e){e.classList.contains("c1")?(e.classList.remove("c1"),e.classList.add("c3")):e.classList.contains("c2")?(e.classList.remove("c2"),e.classList.add("c1")):e.classList.contains("c3")&&(e.classList.remove("c3"),e.classList.add("c2"))}(e)})),o.forEach((function(e){return function(e){e.classList.contains("l1")?(e.classList.remove("l1"),e.classList.add("l2")):e.classList.contains("l2")?(e.classList.remove("l2"),e.classList.add("l3")):e.classList.contains("l3")?(e.classList.remove("l3"),e.classList.add("l4")):e.classList.contains("l4")?(e.classList.remove("l4"),e.classList.add("l5")):e.classList.contains("l5")&&(e.classList.remove("l5"),e.classList.add("l1"))}(e)})),r.forEach((function(e){return function(e){e.classList.contains("l1")?(e.classList.remove("l1"),e.classList.add("l5")):e.classList.contains("l2")?(e.classList.remove("l2"),e.classList.add("l1")):e.classList.contains("l3")?(e.classList.remove("l3"),e.classList.add("l2")):e.classList.contains("l4")?(e.classList.remove("l4"),e.classList.add("l3")):e.classList.contains("l5")&&(e.classList.remove("l5"),e.classList.add("l4"))}(e)})),t>=27&&t<35&&(s[t].classList.remove("frog"),s[t+=1].classList.add("frog")),t>18&&t<=26&&(s[t].classList.remove("frog"),s[t-=1].classList.add("frog")),v()}function g(){clearInterval(i),t=76,n=20,u.textContent=n,d.textContent="Let's get started!",l.textContent=""}m.addEventListener("click",(function(){e=!1,m.textContent="New game",g(),function(){for(var e=0;e<81;e++){var n=document.createElement("div");l.appendChild(n)}var i=(s=l.querySelectorAll("div"))[Math.floor(4.5)];i.classList.add("ending-block"),i.appendChild(document.createElement("img")),i.querySelector("img").setAttribute("src","./assets/icons/sprite.svg#check"),i.querySelector("img").setAttribute("alt","ending-block"),s[t].classList.add("frog");var d=0,u=0;function m(e){++d%5==1&&s[e].classList.add("l1"),d%5==2&&s[e].classList.add("l2"),d%5==3&&s[e].classList.add("l3"),d%5==4&&s[e].classList.add("l4"),d%5==0&&s[e].classList.add("l5")}for(var f=18;f<27;f++)s[f].classList.add("log-left"),m(f);for(var v=27;v<36;v++)s[v].classList.add("log-right"),m(v);function L(e){++u%3==1&&s[e].classList.add("c1"),u%3==2&&s[e].classList.add("c2"),u%3==0&&s[e].classList.add("c3")}for(var g=45;g<54;g++)s[g].classList.add("car-left"),L(g);for(var y=54;y<63;y++)s[y].classList.add("car-right"),L(y);o=document.querySelectorAll(".log-left"),r=document.querySelectorAll(".log-right"),a=document.querySelectorAll(".car-left"),c=document.querySelectorAll(".car-right")}(),i=setInterval(L,1e3),document.addEventListener("keyup",f)})),e&&(g(),m.textContent="Start")}function tetris(e){var t,n,s,o,r,a,c,i=document.querySelector(".tetris__root"),l=document.getElementById("tetris__alert"),d=document.getElementById("tetris__button"),u=10,m=200,f=0,v=["color1","color2","color3","color4","color5"],L=[[[1,11,21,2],[u,11,12,22],[1,11,21,20],[u,20,21,22]],[[0,u,11,21],[11,12,20,21],[0,u,11,21],[11,12,20,21]],[[1,u,11,12],[1,11,12,21],[u,11,12,21],[1,u,11,21]],[[0,1,u,11],[0,1,u,11],[0,1,u,11],[0,1,u,11]],[[1,11,21,31],[u,11,12,13],[1,11,21,31],[u,11,12,13]]];function g(e){38===e.keyCode?function(){E(),++f===t.length&&(f=0);y(),p()}():39===e.keyCode?function(){E(),t.some((function(e){return(n+e)%u==9}))||(n+=1);t.some((function(e){return a[n+e].classList.contains("freeze")}))&&(n-=1);p()}():37===e.keyCode?function(){E(),t.some((function(e){return(n+e)%u==0}))||(n-=1);t.some((function(e){return a[n+e].classList.contains("freeze")}))&&(n+=1);p()}():40===e.keyCode&&C()}function y(){t=L[Math.floor(Math.random()*L.length)][f]}function h(){s=v[Math.floor(Math.random()*v.length)]}function p(){t.forEach((function(e){a[n+e].classList.add("block"),a[n+e].classList.add(s)}))}function E(){t.forEach((function(e){a[n+e].classList.remove("block"),a[n+e].classList.remove(s)}))}function C(){E(),n+=u,p(),t.some((function(e){return a[n+e+u].classList.contains("base")||a[n+e+u].classList.contains("freeze")}))&&(t.forEach((function(e){return a[e+n].classList.add("freeze")})),y(),h(),n=4,function(){for(o=0;o<m;o+=u){var e=[o,o+1,o+2,o+3,o+4,o+5,o+6,o+7,o+8,o+9];if(e.every((function(e){return a[e].classList.contains("freeze")}))){score+=10,r+=1,l.textContent=score+", lines "+r,e.forEach((function(e){a[e].classList.remove("freeze")||a[e].classList.remove("block"),v.forEach((function(t){a[e].classList.contains(t)&&a[e].classList.remove(t)}))}));var t=a.splice(o,u);(a=t.concat(a)).forEach((function(e){return grid.appendChild(e)}))}}}(),t.some((function(e){return a[n+e].classList.contains("freeze")}))&&(l.textContent="End",clearInterval(c),c=null,document.removeEventListener("keydown",g)))}function k(){clearInterval(c),c=null,o=0,f=0,n=4,r=0,l.textContent="Let's get started!",i.textContent=""}d.addEventListener("click",(function(){e=!1,d.textContent="New game",k(),function(){for(var e=0;e<200;e++){var t=document.createElement("div");e>=190&&t.classList.add("base"),i.appendChild(t)}a=i.querySelectorAll("div")}(),y(),h(),p(),c=setInterval(C,1e3),document.addEventListener("keydown",g)})),e&&(k(),d.textContent="Start")}!function(){if("undefined"!=typeof window&&window.addEventListener){var e,t,n,s=Object.create(null),o=function(){clearTimeout(t),t=setTimeout(e,100)},r=function(){},a=function(e){function t(e){var t;return void 0!==e.protocol?t=e:(t=document.createElement("a")).href=e,t.protocol.replace(/:/g,"")+t.host}var n,s,o;return window.XMLHttpRequest&&(n=new XMLHttpRequest,s=t(location),o=t(e),n=void 0===n.withCredentials&&""!==o&&o!==s?XDomainRequest||void 0:XMLHttpRequest),n},c="http://www.w3.org/1999/xlink";e=function(){var e,t,n,i,l,d,u,m,f,v,L=0;function g(){var e;0===(L-=1)&&(r(),window.addEventListener("resize",o,!1),window.addEventListener("orientationchange",o,!1),window.MutationObserver?((e=new MutationObserver(o)).observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0}),r=function(){try{e.disconnect(),window.removeEventListener("resize",o,!1),window.removeEventListener("orientationchange",o,!1)}catch(e){}}):(document.documentElement.addEventListener("DOMSubtreeModified",o,!1),r=function(){document.documentElement.removeEventListener("DOMSubtreeModified",o,!1),window.removeEventListener("resize",o,!1),window.removeEventListener("orientationchange",o,!1)}))}function y(e){return function(){!0!==s[e.base]&&(e.useEl.setAttributeNS(c,"xlink:href","#"+e.hash),e.useEl.hasAttribute("href")&&e.useEl.setAttribute("href","#"+e.hash))}}function h(e){return function(){var t,n=document.body,s=document.createElement("x");e.onload=null,s.innerHTML=e.responseText,(t=s.getElementsByTagName("svg")[0])&&(t.setAttribute("aria-hidden","true"),t.style.position="absolute",t.style.width=0,t.style.height=0,t.style.overflow="hidden",n.insertBefore(t,n.firstChild)),g()}}function p(e){return function(){e.onerror=null,e.ontimeout=null,g()}}for(r(),f=document.getElementsByTagName("use"),l=0;l<f.length;l+=1){try{t=f[l].getBoundingClientRect()}catch(e){t=!1}e=(m=(i=f[l].getAttribute("href")||f[l].getAttributeNS(c,"href")||f[l].getAttribute("xlink:href"))&&i.split?i.split("#"):["",""])[0],n=m[1],d=t&&0===t.left&&0===t.right&&0===t.top&&0===t.bottom,t&&0===t.width&&0===t.height&&!d?(f[l].hasAttribute("href")&&f[l].setAttributeNS(c,"xlink:href",i),e.length&&(!0!==(v=s[e])&&setTimeout(y({useEl:f[l],base:e,hash:n}),0),void 0===v&&void 0!==(u=a(e))&&(v=new u,s[e]=v,v.onload=h(v),v.onerror=p(v),v.ontimeout=p(v),v.open("GET",e),v.send(),L+=1))):d?e.length&&s[e]&&setTimeout(y({useEl:f[l],base:e,hash:n}),0):void 0===s[e]?s[e]=!0:s[e].onload&&(s[e].abort(),delete s[e].onload,s[e]=!0)}f="",L+=1,g()},n=function(){window.removeEventListener("load",n,!1),t=setTimeout(e,0)},"complete"!==document.readyState?window.addEventListener("load",n,!1):n()}}(),document.addEventListener("DOMContentLoaded",(function(){function e(e){var n=e.nextElementSibling;n.style.maxHeight?(n.style.maxHeight=null,e===t&&(t.querySelector("svg").style.transform="rotate(180deg)")):(n.style.maxHeight=n.scrollHeight+"px",e===t&&(t.querySelector("svg").style.transform="rotate(0deg)"))}var t=document.querySelector(".hero__title"),n=document.querySelector(".hero").querySelector("ul"),s=n.querySelectorAll("li"),o=document.querySelectorAll(".content__item"),r=!0;e(t),t.addEventListener("click",(function(){e(t)})),n.addEventListener("click",(function(n){var a=n.target,c=a.dataset.type;e(t),s.forEach((function(e){e.style.textDecoration="none",e.querySelector("svg").style.opacity="0"})),memoryGame(r),whackAMole(r),connectFour(r),snake(r),spaceInvaders(r),frogger(r),tetris(r);for(var i=0;i<o.length;i++)o[i].style.display="none",o[i].classList.contains(c)&&(o[i].style.display="flex",a.style.textDecoration="underline",a.querySelector("svg").style.opacity="1","memory-game"===c?memoryGame():"whack-a-mole"===c?whackAMole():"connect-four"===c?connectFour():"snake"===c?snake():"space-invaders"===c?spaceInvaders():"frogger"===c?frogger():"tetris"===c&&tetris())}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
