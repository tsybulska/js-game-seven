"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */function connectFour(e){var t=document.querySelector(".connect-four__root");document.querySelector("#connect-four__alert"),document.querySelector("#connect-four__result"),document.querySelector("#connect-four__button");!function(){for(var e=0;e<49;e++){var n=document.createElement("div");e>=42&&n.classList.add("taken"),t.appendChild(n)}t.querySelectorAll("div")}()}function memoryGame(e){var t,n=[{name:"leaf",img:"./assets/icons/sprite.svg#leaf"},{name:"brightness-up",img:"./assets/icons/sprite.svg#brightness-up"},{name:"star",img:"./assets/icons/sprite.svg#star"},{name:"flame",img:"./assets/icons/sprite.svg#flame"},{name:"mountain",img:"./assets/icons/sprite.svg#mountain"},{name:"music",img:"./assets/icons/sprite.svg#music"}],r=document.querySelector(".memory-game__root"),o=document.querySelector("#memory-game__alert"),a=document.querySelector("#memory-game__result"),i=document.querySelector("#memory-game__button"),s="./assets/icons/sprite.svg#search",c="./assets/icons/sprite.svg#check",u=[],l=[],m=[];function d(){var e=u[0],r=u[1],i=l[0],s=l[1];i===s?(o.textContent="You have clicked the same image",f()):e===r?(o.textContent="You found a match",t[i].querySelector("img").setAttribute("src",c),t[s].querySelector("img").setAttribute("src",c),t[i].removeEventListener("click",y),t[s].removeEventListener("click",y),m.push(l)):(o.textContent="Try again",f()),u=[],l=[],a.textContent=m.length,m.length===n.length/2&&(o.textContent="Congratulations! You found them all")}function y(e){var t=e.target.closest("div").querySelector("img"),r=e.target.closest("div").getAttribute("data-memorygameid");u.push(n[r].name),l.push(r),t.setAttribute("src",n[r].img),2===u.length&&setTimeout(d,500),u.length>2&&f()}function f(){t.forEach((function(e){m.flat(1/0).includes(e.dataset.memorygameid)||e.querySelector("img").setAttribute("src",s)}))}function h(){u=[],l=[],m=[],o.textContent="Flip two cards",a.textContent=m.length,r.textContent=""}n=[].concat(_toConsumableArray(n),_toConsumableArray(n)),i.addEventListener("click",(function(){e=!1,i.textContent="New game",h(),function(){n.sort((function(){return.5-Math.random()}));for(var e=0;e<n.length;e++){var o=document.createElement("div"),a=document.createElement("img");a.setAttribute("src",s),a.setAttribute("alt","card"),o.setAttribute("data-memorygameid",e),o.addEventListener("click",y),o.appendChild(a),r.appendChild(o)}t=r.querySelectorAll("div")}()})),e&&(h(),i.textContent="Start")}function whackAMole(e){var t,n,r,o,a=document.querySelector(".whack-a-mole__root"),i=document.querySelector("#whack-a-mole__time"),s=document.querySelector("#whack-a-mole__result"),c=document.querySelector("#whack-a-mole__button"),u="./assets/icons/sprite.svg#smiley",l=60,m=0;function d(){for(var e=0;e<6;e++){var n=document.createElement("div"),i=document.createElement("img");i.setAttribute("src",u),i.setAttribute("alt","mole"),n.setAttribute("data-whackamole",e),n.addEventListener("mouseup",f),n.appendChild(i),a.appendChild(n)}t=a.querySelectorAll("div"),r=setInterval(y,700),o=setInterval(h,1e3)}function y(){var e=t[Math.floor(6*Math.random())];t.forEach((function(e){e.querySelector("img").setAttribute("src",u),e.classList.remove("mole")})),e.classList.add("mole"),n=e.dataset.whackamole}function f(){this.dataset.whackamole===n&&(this.querySelector("img").setAttribute("src","./assets/icons/sprite.svg#smiley-f"),m++,s.textContent=m,n=null)}function h(){l--,i.textContent=l,0===parseInt(l)&&(clearInterval(r),clearInterval(o),s.textContent="Game over! Your final score is "+m)}function v(){m=0,s.textContent=m,n=null,clearInterval(r),clearInterval(o),l=60,i.textContent=l,a.textContent=""}c.addEventListener("click",(function(){e=!1,c.textContent="New game",v(),d()})),e&&(v(),c.textContent="Start")}!function(){if("undefined"!=typeof window&&window.addEventListener){var e,t,n,r=Object.create(null),o=function(){clearTimeout(t),t=setTimeout(e,100)},a=function(){},i=function(e){function t(e){var t;return void 0!==e.protocol?t=e:(t=document.createElement("a")).href=e,t.protocol.replace(/:/g,"")+t.host}var n,r,o;return window.XMLHttpRequest&&(n=new XMLHttpRequest,r=t(location),o=t(e),n=void 0===n.withCredentials&&""!==o&&o!==r?XDomainRequest||void 0:XMLHttpRequest),n},s="http://www.w3.org/1999/xlink";e=function(){var e,t,n,c,u,l,m,d,y,f,h=0;function v(){var e;0===(h-=1)&&(a(),window.addEventListener("resize",o,!1),window.addEventListener("orientationchange",o,!1),window.MutationObserver?((e=new MutationObserver(o)).observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0}),a=function(){try{e.disconnect(),window.removeEventListener("resize",o,!1),window.removeEventListener("orientationchange",o,!1)}catch(e){}}):(document.documentElement.addEventListener("DOMSubtreeModified",o,!1),a=function(){document.documentElement.removeEventListener("DOMSubtreeModified",o,!1),window.removeEventListener("resize",o,!1),window.removeEventListener("orientationchange",o,!1)}))}function g(e){return function(){!0!==r[e.base]&&(e.useEl.setAttributeNS(s,"xlink:href","#"+e.hash),e.useEl.hasAttribute("href")&&e.useEl.setAttribute("href","#"+e.hash))}}function p(e){return function(){var t,n=document.body,r=document.createElement("x");e.onload=null,r.innerHTML=e.responseText,(t=r.getElementsByTagName("svg")[0])&&(t.setAttribute("aria-hidden","true"),t.style.position="absolute",t.style.width=0,t.style.height=0,t.style.overflow="hidden",n.insertBefore(t,n.firstChild)),v()}}function b(e){return function(){e.onerror=null,e.ontimeout=null,v()}}for(a(),y=document.getElementsByTagName("use"),u=0;u<y.length;u+=1){try{t=y[u].getBoundingClientRect()}catch(e){t=!1}e=(d=(c=y[u].getAttribute("href")||y[u].getAttributeNS(s,"href")||y[u].getAttribute("xlink:href"))&&c.split?c.split("#"):["",""])[0],n=d[1],l=t&&0===t.left&&0===t.right&&0===t.top&&0===t.bottom,t&&0===t.width&&0===t.height&&!l?(y[u].hasAttribute("href")&&y[u].setAttributeNS(s,"xlink:href",c),e.length&&(!0!==(f=r[e])&&setTimeout(g({useEl:y[u],base:e,hash:n}),0),void 0===f&&void 0!==(m=i(e))&&(f=new m,r[e]=f,f.onload=p(f),f.onerror=b(f),f.ontimeout=b(f),f.open("GET",e),f.send(),h+=1))):l?e.length&&r[e]&&setTimeout(g({useEl:y[u],base:e,hash:n}),0):void 0===r[e]?r[e]=!0:r[e].onload&&(r[e].abort(),delete r[e].onload,r[e]=!0)}y="",h+=1,v()},n=function(){window.removeEventListener("load",n,!1),t=setTimeout(e,0)},"complete"!==document.readyState?window.addEventListener("load",n,!1):n()}}(),document.addEventListener("DOMContentLoaded",(function(){function e(e){var n=e.nextElementSibling;n.style.maxHeight?(n.style.maxHeight=null,e===t&&(t.querySelector("svg").style.transform="rotate(180deg)")):(n.style.maxHeight=n.scrollHeight+"px",e===t&&(t.querySelector("svg").style.transform="rotate(0deg)"))}var t=document.querySelector(".hero__title"),n=document.querySelector(".hero").querySelector("ul"),r=n.querySelectorAll("li"),o=document.querySelectorAll(".content__item"),a=!0;e(t),t.addEventListener("click",(function(){e(t)})),n.addEventListener("click",(function(n){var i=n.target,s=i.dataset.type;e(t),r.forEach((function(e){e.style.textDecoration="none",e.querySelector("svg").style.opacity="0"})),memoryGame(a),whackAMole(a),connectFour(a);for(var c=0;c<o.length;c++)o[c].style.display="none",o[c].classList.contains(s)&&(o[c].style.display="flex",i.style.textDecoration="underline",i.querySelector("svg").style.opacity="1","memory-game"===s?memoryGame():"whack-a-mole"===s?whackAMole():"connect-four"===s&&connectFour())}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
