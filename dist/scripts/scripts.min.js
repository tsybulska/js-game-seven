"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */function snake(e){var t,n=document.querySelector(".snake__root"),o=document.getElementById("snake__alert"),r=document.getElementById("snake__result"),a=document.getElementById("snake__button"),s=10,i=0,c=0,l=[2,1,0],u=1,d=0,m=0,y=0;function v(){var e=l[0];if(e+s>=100&&u===s||l[0]%s==9&&1===u||e%s==0&&-1===u||e-s<0&&-10===u||t[e+u].classList.contains("snake"))return o.textContent="Boom Crash! Your score is "+d,clearInterval(y);var n=l.pop();t[n].classList.remove("snake"),l.unshift(e+u),e=l[0],t[e].classList.contains("apple")&&(t[e].classList.remove("apple"),l.push(n),f(),d++,r.textContent=d,clearInterval(y),m*=.9,y=setInterval(v,m)),t[e].classList.add("snake")}function f(){do{c=Math.floor(Math.random()*t.length)}while(t[c].classList.contains("snake"));t[c].classList.add("apple")}function g(){d=0,r.textContent=d,clearInterval(y),u=1,m=1e3,i=0,l=[2,1,0],o.textContent="Let's get started!",n.textContent=""}e&&(g(),a.textContent="Start"),a.addEventListener("click",(function(){e=!1,a.textContent="New game",g(),function(){for(var e=0;e<100;e++){var o=document.createElement("div");n.appendChild(o)}t=n.querySelectorAll("div")}(),l.forEach((function(e){return t[e].classList.add("snake")})),f(),y=setInterval(v,m)})),document.addEventListener("keyup",(function(e){t[i].classList.remove("snake"),39===e.keyCode?u=1:38===e.keyCode?u=-10:37===e.keyCode?u=-1:40===e.keyCode&&(u=10)}))}function connectFour(e){var t,n=[[0,1,2,3],[41,40,39,38],[7,8,9,10],[34,33,32,31],[14,15,16,17],[27,26,25,24],[21,22,23,24],[20,19,18,17],[28,29,30,31],[13,12,11,10],[35,36,37,38],[6,5,4,3],[0,7,14,21],[41,34,27,20],[1,8,15,22],[40,33,26,19],[2,9,16,23],[39,32,25,18],[3,10,17,24],[38,31,24,17],[4,11,18,25],[37,30,23,16],[5,12,19,26],[36,29,22,15],[6,13,20,27],[35,28,21,14],[0,8,16,24],[41,33,25,17],[7,15,23,31],[34,26,18,10],[14,22,30,38],[27,19,11,3],[35,29,23,17],[6,12,18,24],[28,22,16,10],[13,19,25,31],[21,15,9,3],[20,26,32,38],[36,30,24,18],[5,11,17,23],[37,31,25,19],[4,10,16,22],[2,10,18,26],[39,31,23,15],[1,9,17,25],[40,32,24,16],[9,17,25,33],[8,16,24,32],[11,17,23,29],[12,18,24,30],[1,2,3,4],[5,4,3,2],[8,9,10,11],[12,11,10,9],[15,16,17,18],[19,18,17,16],[22,23,24,25],[26,25,24,23],[29,30,31,32],[33,32,31,30],[36,37,38,39],[40,39,38,37],[7,14,21,28],[8,15,22,29],[9,16,23,30],[10,17,24,31],[11,18,25,32],[12,19,26,33],[13,20,27,34]],o=document.querySelector(".connect-four__root"),r=document.getElementById("connect-four__alert"),a=document.getElementById("connect-four__player"),s=document.getElementById("connect-four__button"),i=1,c=!1;function l(){for(var e=0;e<n.length;e++){var o=t[n[e][0]],a=t[n[e][1]],s=t[n[e][2]],i=t[n[e][3]];if(o.classList.contains("player-one")&&a.classList.contains("player-one")&&s.classList.contains("player-one")&&i.classList.contains("player-one")&&(c=!0,r.textContent="Player One Wins!"),o.classList.contains("player-two")&&a.classList.contains("player-two")&&s.classList.contains("player-two")&&i.classList.contains("player-two")&&(c=!0,r.textContent="Player Two Wins!"),c)for(var l=0;l<t.length-7;l++)t[l].removeEventListener("click",u)}}function u(e){for(var n=0;n<t.length-7;n++)t[n]===e.target&&t[n+7].classList.contains("taken")&&!t[n].classList.contains("taken")?(t[n].classList.add("taken"),t[n].removeEventListener("click",u),1===i?(t[n].classList.add("player-one"),i=2):2===i&&(t[n].classList.add("player-two"),i=1),a.textContent=i):r.textContent="Cant go here",l()}function d(){i=1,a.textContent=i,c=!1,r.textContent="Let's get started!",o.textContent=""}s.addEventListener("click",(function(){e=!1,s.textContent="New game",d(),function(){for(var e=0;e<49;e++){var n=document.createElement("div");e>=42?n.classList.add("taken"):n.addEventListener("click",u),n.setAttribute("data-connectfour",e),o.appendChild(n)}t=o.querySelectorAll("div")}()})),e&&(d(),s.textContent="Start")}function memoryGame(e){var t,n=[{name:"leaf",img:"./assets/icons/sprite.svg#leaf"},{name:"brightness-up",img:"./assets/icons/sprite.svg#brightness-up"},{name:"star",img:"./assets/icons/sprite.svg#star"},{name:"flame",img:"./assets/icons/sprite.svg#flame"},{name:"mountain",img:"./assets/icons/sprite.svg#mountain"},{name:"music",img:"./assets/icons/sprite.svg#music"}],o=document.querySelector(".memory-game__root"),r=document.getElementById("memory-game__alert"),a=document.getElementById("memory-game__result"),s=document.getElementById("memory-game__button"),i="./assets/icons/sprite.svg#search",c="./assets/icons/sprite.svg#check",l=[],u=[],d=[];function m(){var e=l[0],o=l[1],s=u[0],i=u[1];s===i?(r.textContent="You have clicked the same image",v()):e===o?(r.textContent="You found a match",t[s].querySelector("img").setAttribute("src",c),t[i].querySelector("img").setAttribute("src",c),t[s].removeEventListener("click",y),t[i].removeEventListener("click",y),d.push(u)):(r.textContent="Try again",v()),l=[],u=[],a.textContent=d.length,d.length===n.length/2&&(r.textContent="Congratulations! You found them all")}function y(e){var t=e.target.closest("div").querySelector("img"),o=e.target.closest("div").getAttribute("data-memorygameid");l.push(n[o].name),u.push(o),t.setAttribute("src",n[o].img),2===l.length&&setTimeout(m,500),l.length>2&&v()}function v(){t.forEach((function(e){d.flat(1/0).includes(e.dataset.memorygameid)||e.querySelector("img").setAttribute("src",i)}))}function f(){l=[],u=[],d=[],r.textContent="Let's get started!",a.textContent=d.length,o.textContent=""}n=[].concat(_toConsumableArray(n),_toConsumableArray(n)),s.addEventListener("click",(function(){e=!1,s.textContent="New game",f(),function(){n.sort((function(){return.5-Math.random()}));for(var e=0;e<n.length;e++){var r=document.createElement("div"),a=document.createElement("img");a.setAttribute("src",i),a.setAttribute("alt","card"),r.setAttribute("data-memorygameid",e),r.addEventListener("click",y),r.appendChild(a),o.appendChild(r)}t=o.querySelectorAll("div")}()})),e&&(f(),s.textContent="Start")}function whackAMole(e){var t,n,o,r,a=document.querySelector(".whack-a-mole__root"),s=document.getElementById("whack-a-mole__time"),i=document.getElementById("whack-a-mole__result"),c=document.getElementById("whack-a-mole__button"),l="./assets/icons/sprite.svg#smiley",u=60,d=0;function m(){for(var e=0;e<6;e++){var n=document.createElement("div"),s=document.createElement("img");s.setAttribute("src",l),s.setAttribute("alt","mole"),n.setAttribute("data-whackamole",e),n.addEventListener("mouseup",v),n.appendChild(s),a.appendChild(n)}t=a.querySelectorAll("div"),o=setInterval(y,700),r=setInterval(f,1e3)}function y(){var e=t[Math.floor(6*Math.random())];t.forEach((function(e){e.querySelector("img").setAttribute("src",l),e.classList.remove("mole")})),e.classList.add("mole"),n=e.dataset.whackamole}function v(){this.dataset.whackamole===n&&(this.querySelector("img").setAttribute("src","./assets/icons/sprite.svg#smiley-f"),d++,i.textContent=d,n=null)}function f(){u--,s.textContent=u,0===parseInt(u)&&(clearInterval(o),clearInterval(r),i.textContent="Game over! Your final score is "+d)}function g(){d=0,i.textContent=d,n=null,clearInterval(o),clearInterval(r),u=60,s.textContent=u,a.textContent=""}c.addEventListener("click",(function(){e=!1,c.textContent="New game",g(),m()})),e&&(g(),c.textContent="Start")}!function(){if("undefined"!=typeof window&&window.addEventListener){var e,t,n,o=Object.create(null),r=function(){clearTimeout(t),t=setTimeout(e,100)},a=function(){},s=function(e){function t(e){var t;return void 0!==e.protocol?t=e:(t=document.createElement("a")).href=e,t.protocol.replace(/:/g,"")+t.host}var n,o,r;return window.XMLHttpRequest&&(n=new XMLHttpRequest,o=t(location),r=t(e),n=void 0===n.withCredentials&&""!==r&&r!==o?XDomainRequest||void 0:XMLHttpRequest),n},i="http://www.w3.org/1999/xlink";e=function(){var e,t,n,c,l,u,d,m,y,v,f=0;function g(){var e;0===(f-=1)&&(a(),window.addEventListener("resize",r,!1),window.addEventListener("orientationchange",r,!1),window.MutationObserver?((e=new MutationObserver(r)).observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0}),a=function(){try{e.disconnect(),window.removeEventListener("resize",r,!1),window.removeEventListener("orientationchange",r,!1)}catch(e){}}):(document.documentElement.addEventListener("DOMSubtreeModified",r,!1),a=function(){document.documentElement.removeEventListener("DOMSubtreeModified",r,!1),window.removeEventListener("resize",r,!1),window.removeEventListener("orientationchange",r,!1)}))}function h(e){return function(){!0!==o[e.base]&&(e.useEl.setAttributeNS(i,"xlink:href","#"+e.hash),e.useEl.hasAttribute("href")&&e.useEl.setAttribute("href","#"+e.hash))}}function p(e){return function(){var t,n=document.body,o=document.createElement("x");e.onload=null,o.innerHTML=e.responseText,(t=o.getElementsByTagName("svg")[0])&&(t.setAttribute("aria-hidden","true"),t.style.position="absolute",t.style.width=0,t.style.height=0,t.style.overflow="hidden",n.insertBefore(t,n.firstChild)),g()}}function L(e){return function(){e.onerror=null,e.ontimeout=null,g()}}for(a(),y=document.getElementsByTagName("use"),l=0;l<y.length;l+=1){try{t=y[l].getBoundingClientRect()}catch(e){t=!1}e=(m=(c=y[l].getAttribute("href")||y[l].getAttributeNS(i,"href")||y[l].getAttribute("xlink:href"))&&c.split?c.split("#"):["",""])[0],n=m[1],u=t&&0===t.left&&0===t.right&&0===t.top&&0===t.bottom,t&&0===t.width&&0===t.height&&!u?(y[l].hasAttribute("href")&&y[l].setAttributeNS(i,"xlink:href",c),e.length&&(!0!==(v=o[e])&&setTimeout(h({useEl:y[l],base:e,hash:n}),0),void 0===v&&void 0!==(d=s(e))&&(v=new d,o[e]=v,v.onload=p(v),v.onerror=L(v),v.ontimeout=L(v),v.open("GET",e),v.send(),f+=1))):u?e.length&&o[e]&&setTimeout(h({useEl:y[l],base:e,hash:n}),0):void 0===o[e]?o[e]=!0:o[e].onload&&(o[e].abort(),delete o[e].onload,o[e]=!0)}y="",f+=1,g()},n=function(){window.removeEventListener("load",n,!1),t=setTimeout(e,0)},"complete"!==document.readyState?window.addEventListener("load",n,!1):n()}}(),document.addEventListener("DOMContentLoaded",(function(){function e(e){var n=e.nextElementSibling;n.style.maxHeight?(n.style.maxHeight=null,e===t&&(t.querySelector("svg").style.transform="rotate(180deg)")):(n.style.maxHeight=n.scrollHeight+"px",e===t&&(t.querySelector("svg").style.transform="rotate(0deg)"))}var t=document.querySelector(".hero__title"),n=document.querySelector(".hero").querySelector("ul"),o=n.querySelectorAll("li"),r=document.querySelectorAll(".content__item"),a=!0;e(t),t.addEventListener("click",(function(){e(t)})),n.addEventListener("click",(function(n){var s=n.target,i=s.dataset.type;e(t),o.forEach((function(e){e.style.textDecoration="none",e.querySelector("svg").style.opacity="0"})),memoryGame(a),whackAMole(a),connectFour(a),snake(a);for(var c=0;c<r.length;c++)r[c].style.display="none",r[c].classList.contains(i)&&(r[c].style.display="flex",s.style.textDecoration="underline",s.querySelector("svg").style.opacity="1","memory-game"===i?memoryGame():"whack-a-mole"===i?whackAMole():"connect-four"===i?connectFour():"snake"===i&&snake())}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
