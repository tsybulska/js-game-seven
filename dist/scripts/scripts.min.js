"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */function memoryGame(){var e,t=[{name:"leaf",img:"./assets/icons/sprite.svg#leaf"},{name:"brightness-up",img:"./assets/icons/sprite.svg#brightness-up"},{name:"star",img:"./assets/icons/sprite.svg#star"},{name:"flame",img:"./assets/icons/sprite.svg#flame"},{name:"mountain",img:"./assets/icons/sprite.svg#mountain"},{name:"music",img:"./assets/icons/sprite.svg#music"}],n=document.querySelector(".memory-game__root"),r=document.querySelector("#memory-game__alert"),o=r.textContent,i=document.querySelector("#memory-game__result"),a=document.querySelector("#memory-game__button"),s="./assets/icons/sprite.svg#search",u="./assets/icons/sprite.svg#check",l=[],c=[],m=[];function d(){t.sort((function(){return.5-Math.random()}));for(var r=0;r<t.length;r++){var o=document.createElement("div"),i=document.createElement("img");i.setAttribute("src",s),i.setAttribute("alt","card"),o.setAttribute("data-memorygameid",r),o.addEventListener("click",h),o.appendChild(i),n.appendChild(o)}e=n.querySelectorAll("div")}function g(){var n=l[0],o=l[1],a=c[0],s=c[1];a===s?(r.textContent="You have clicked the same image",y()):n===o?(r.textContent="You found a match",e[a].querySelector("img").setAttribute("src",u),e[s].querySelector("img").setAttribute("src",u),e[a].removeEventListener("click",h),e[s].removeEventListener("click",h),m.push(c)):(r.textContent="Try again",y()),l=[],c=[],i.textContent=m.length,m.length===t.length/2&&(r.textContent="Congratulations! You found them all")}function h(e){var n=e.target.closest("div").querySelector("img"),r=e.target.closest("div").getAttribute("data-memorygameid");l.push(t[r].name),c.push(r),n.setAttribute("src",t[r].img),2===l.length&&setTimeout(g,500),l.length>2&&y()}function y(){e.forEach((function(e){m.flat(1/0).includes(e.dataset.memorygameid)||e.querySelector("img").setAttribute("src",s)}))}t=[].concat(_toConsumableArray(t),_toConsumableArray(t)),d(),a.addEventListener("click",(function(){l=[],c=[],m=[],r.textContent=o,i.textContent=m.length,n.textContent="",d()}))}!function(){if("undefined"!=typeof window&&window.addEventListener){var e,t,n,r=Object.create(null),o=function(){clearTimeout(t),t=setTimeout(e,100)},i=function(){},a=function(e){function t(e){var t;return void 0!==e.protocol?t=e:(t=document.createElement("a")).href=e,t.protocol.replace(/:/g,"")+t.host}var n,r,o;return window.XMLHttpRequest&&(n=new XMLHttpRequest,r=t(location),o=t(e),n=void 0===n.withCredentials&&""!==o&&o!==r?XDomainRequest||void 0:XMLHttpRequest),n},s="http://www.w3.org/1999/xlink";e=function(){var e,t,n,u,l,c,m,d,g,h,y=0;function f(){var e;0===(y-=1)&&(i(),window.addEventListener("resize",o,!1),window.addEventListener("orientationchange",o,!1),window.MutationObserver?((e=new MutationObserver(o)).observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0}),i=function(){try{e.disconnect(),window.removeEventListener("resize",o,!1),window.removeEventListener("orientationchange",o,!1)}catch(e){}}):(document.documentElement.addEventListener("DOMSubtreeModified",o,!1),i=function(){document.documentElement.removeEventListener("DOMSubtreeModified",o,!1),window.removeEventListener("resize",o,!1),window.removeEventListener("orientationchange",o,!1)}))}function v(e){return function(){!0!==r[e.base]&&(e.useEl.setAttributeNS(s,"xlink:href","#"+e.hash),e.useEl.hasAttribute("href")&&e.useEl.setAttribute("href","#"+e.hash))}}function b(e){return function(){var t,n=document.body,r=document.createElement("x");e.onload=null,r.innerHTML=e.responseText,(t=r.getElementsByTagName("svg")[0])&&(t.setAttribute("aria-hidden","true"),t.style.position="absolute",t.style.width=0,t.style.height=0,t.style.overflow="hidden",n.insertBefore(t,n.firstChild)),f()}}function p(e){return function(){e.onerror=null,e.ontimeout=null,f()}}for(i(),g=document.getElementsByTagName("use"),l=0;l<g.length;l+=1){try{t=g[l].getBoundingClientRect()}catch(e){t=!1}e=(d=(u=g[l].getAttribute("href")||g[l].getAttributeNS(s,"href")||g[l].getAttribute("xlink:href"))&&u.split?u.split("#"):["",""])[0],n=d[1],c=t&&0===t.left&&0===t.right&&0===t.top&&0===t.bottom,t&&0===t.width&&0===t.height&&!c?(g[l].hasAttribute("href")&&g[l].setAttributeNS(s,"xlink:href",u),e.length&&(!0!==(h=r[e])&&setTimeout(v({useEl:g[l],base:e,hash:n}),0),void 0===h&&void 0!==(m=a(e))&&(h=new m,r[e]=h,h.onload=b(h),h.onerror=p(h),h.ontimeout=p(h),h.open("GET",e),h.send(),y+=1))):c?e.length&&r[e]&&setTimeout(v({useEl:g[l],base:e,hash:n}),0):void 0===r[e]?r[e]=!0:r[e].onload&&(r[e].abort(),delete r[e].onload,r[e]=!0)}g="",y+=1,f()},n=function(){window.removeEventListener("load",n,!1),t=setTimeout(e,0)},"complete"!==document.readyState?window.addEventListener("load",n,!1):n()}}(),document.addEventListener("DOMContentLoaded",(function(){function e(e){var n=e.nextElementSibling;n.style.maxHeight?(n.style.maxHeight=null,e===t&&(t.querySelector("svg").style.transform="rotate(180deg)")):(n.style.maxHeight=n.scrollHeight+"px",e===t&&(t.querySelector("svg").style.transform="rotate(0deg)"))}var t=document.querySelector(".hero__title"),n=document.querySelector(".hero").querySelector("ul"),r=document.querySelectorAll(".content__item");e(t),t.addEventListener("click",(function(n){e(t)})),n.addEventListener("click",(function(n){var o=n.target.dataset.type;e(t);for(var i=0;i<r.length;i++)r[i].style.display="none",r[i].classList.contains(o)&&(r[i].style.display="flex")})),memoryGame()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
