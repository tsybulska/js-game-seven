"use strict";function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(e,t):void 0}}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}
/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */function memoryGame(e){var t,n=[{name:"leaf",img:"./assets/icons/sprite.svg#leaf"},{name:"brightness-up",img:"./assets/icons/sprite.svg#brightness-up"},{name:"star",img:"./assets/icons/sprite.svg#star"},{name:"flame",img:"./assets/icons/sprite.svg#flame"},{name:"mountain",img:"./assets/icons/sprite.svg#mountain"},{name:"music",img:"./assets/icons/sprite.svg#music"}],r=document.querySelector(".memory-game__root"),o=document.querySelector("#memory-game__alert"),i=document.querySelector("#memory-game__result"),a=document.querySelector("#memory-game__button"),s=o.textContent,l="./assets/icons/sprite.svg#search",u="./assets/icons/sprite.svg#check",c=[],m=[],d=[];function y(){var e=c[0],r=c[1],a=m[0],s=m[1];a===s?(o.textContent="You have clicked the same image",v()):e===r?(o.textContent="You found a match",t[a].querySelector("img").setAttribute("src",u),t[s].querySelector("img").setAttribute("src",u),t[a].removeEventListener("click",h),t[s].removeEventListener("click",h),d.push(m)):(o.textContent="Try again",v()),c=[],m=[],i.textContent=d.length,d.length===n.length/2&&(o.textContent="Congratulations! You found them all")}function h(e){var t=e.target.closest("div").querySelector("img"),r=e.target.closest("div").getAttribute("data-memorygameid");c.push(n[r].name),m.push(r),t.setAttribute("src",n[r].img),2===c.length&&setTimeout(y,500),c.length>2&&v()}function v(){t.forEach((function(e){d.flat(1/0).includes(e.dataset.memorygameid)||e.querySelector("img").setAttribute("src",l)}))}n=[].concat(_toConsumableArray(n),_toConsumableArray(n)),a.addEventListener("click",(function(){a.textContent="New game",c=[],m=[],d=[],o.textContent=s,i.textContent=d.length,r.textContent="",function(){n.sort((function(){return.5-Math.random()}));for(var e=0;e<n.length;e++){var o=document.createElement("div"),i=document.createElement("img");i.setAttribute("src",l),i.setAttribute("alt","card"),o.setAttribute("data-memorygameid",e),o.addEventListener("click",h),o.appendChild(i),r.appendChild(o)}t=r.querySelectorAll("div")}()}))}function whackAMole(e){var t,n,r=document.querySelector(".whack-a-mole__root"),o=document.querySelector("#whack-a-mole__time"),i=o.textContent,a=document.querySelector("#whack-a-mole__result"),s=document.querySelector("#whack-a-mole__button"),l="./assets/icons/sprite.svg#smiley",u=i,c=0,m=0,d=0;function y(){for(var e=0;e<6;e++){var n=document.createElement("div"),o=document.createElement("img");o.setAttribute("src",l),o.setAttribute("alt","mole"),n.setAttribute("data-whackamole",e),n.addEventListener("mouseup",v),n.appendChild(o),r.appendChild(n)}t=r.querySelectorAll("div"),m=setInterval(h,700),d=setInterval(f,1e3)}function h(){var e=t[Math.floor(6*Math.random())];t.forEach((function(e){e.querySelector("img").setAttribute("src",l),e.classList.remove("mole")})),e.classList.add("mole"),n=e.dataset.whackamole}function v(){this.dataset.whackamole===n&&(this.querySelector("img").setAttribute("src","./assets/icons/sprite.svg#smiley-f"),c++,a.textContent=c,n=null)}function f(){u--,o.textContent=u,0===parseInt(u)&&(clearInterval(m),clearInterval(d),a.textContent="Game over! Your final score is "+c)}s.addEventListener("click",(function(){s.textContent="New game",c=0,a.textContent=c,n=null,u=i,o.textContent=u,clearInterval(m),clearInterval(d),r.textContent="",y()}))}!function(){if("undefined"!=typeof window&&window.addEventListener){var e,t,n,r=Object.create(null),o=function(){clearTimeout(t),t=setTimeout(e,100)},i=function(){},a=function(e){function t(e){var t;return void 0!==e.protocol?t=e:(t=document.createElement("a")).href=e,t.protocol.replace(/:/g,"")+t.host}var n,r,o;return window.XMLHttpRequest&&(n=new XMLHttpRequest,r=t(location),o=t(e),n=void 0===n.withCredentials&&""!==o&&o!==r?XDomainRequest||void 0:XMLHttpRequest),n},s="http://www.w3.org/1999/xlink";e=function(){var e,t,n,l,u,c,m,d,y,h,v=0;function f(){var e;0===(v-=1)&&(i(),window.addEventListener("resize",o,!1),window.addEventListener("orientationchange",o,!1),window.MutationObserver?((e=new MutationObserver(o)).observe(document.documentElement,{childList:!0,subtree:!0,attributes:!0}),i=function(){try{e.disconnect(),window.removeEventListener("resize",o,!1),window.removeEventListener("orientationchange",o,!1)}catch(e){}}):(document.documentElement.addEventListener("DOMSubtreeModified",o,!1),i=function(){document.documentElement.removeEventListener("DOMSubtreeModified",o,!1),window.removeEventListener("resize",o,!1),window.removeEventListener("orientationchange",o,!1)}))}function g(e){return function(){!0!==r[e.base]&&(e.useEl.setAttributeNS(s,"xlink:href","#"+e.hash),e.useEl.hasAttribute("href")&&e.useEl.setAttribute("href","#"+e.hash))}}function p(e){return function(){var t,n=document.body,r=document.createElement("x");e.onload=null,r.innerHTML=e.responseText,(t=r.getElementsByTagName("svg")[0])&&(t.setAttribute("aria-hidden","true"),t.style.position="absolute",t.style.width=0,t.style.height=0,t.style.overflow="hidden",n.insertBefore(t,n.firstChild)),f()}}function b(e){return function(){e.onerror=null,e.ontimeout=null,f()}}for(i(),y=document.getElementsByTagName("use"),u=0;u<y.length;u+=1){try{t=y[u].getBoundingClientRect()}catch(e){t=!1}e=(d=(l=y[u].getAttribute("href")||y[u].getAttributeNS(s,"href")||y[u].getAttribute("xlink:href"))&&l.split?l.split("#"):["",""])[0],n=d[1],c=t&&0===t.left&&0===t.right&&0===t.top&&0===t.bottom,t&&0===t.width&&0===t.height&&!c?(y[u].hasAttribute("href")&&y[u].setAttributeNS(s,"xlink:href",l),e.length&&(!0!==(h=r[e])&&setTimeout(g({useEl:y[u],base:e,hash:n}),0),void 0===h&&void 0!==(m=a(e))&&(h=new m,r[e]=h,h.onload=p(h),h.onerror=b(h),h.ontimeout=b(h),h.open("GET",e),h.send(),v+=1))):c?e.length&&r[e]&&setTimeout(g({useEl:y[u],base:e,hash:n}),0):void 0===r[e]?r[e]=!0:r[e].onload&&(r[e].abort(),delete r[e].onload,r[e]=!0)}y="",v+=1,f()},n=function(){window.removeEventListener("load",n,!1),t=setTimeout(e,0)},"complete"!==document.readyState?window.addEventListener("load",n,!1):n()}}(),document.addEventListener("DOMContentLoaded",(function(){function e(e){var n=e.nextElementSibling;n.style.maxHeight?(n.style.maxHeight=null,e===t&&(t.querySelector("svg").style.transform="rotate(180deg)")):(n.style.maxHeight=n.scrollHeight+"px",e===t&&(t.querySelector("svg").style.transform="rotate(0deg)"))}var t=document.querySelector(".hero__title"),n=document.querySelector(".hero").querySelector("ul"),r=n.querySelectorAll("li"),o=document.querySelectorAll(".content__item");e(t),t.addEventListener("click",(function(n){e(t)})),n.addEventListener("click",(function(n){var i=n.target,a=i.dataset.type;e(t),r.forEach((function(e){e.style.textDecoration="none",e.querySelector("svg").style.opacity="0"}));for(var s=0;s<o.length;s++)o[s].style.display="none",o[s].classList.contains(a)&&(o[s].style.display="flex",i.style.textDecoration="underline",i.querySelector("svg").style.opacity="1","memory-game"===a?memoryGame():"whack-a-mole"===a&&whackAMole())}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
